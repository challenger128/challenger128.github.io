[ { "title": "Start your own blog on Github Pages", "url": "/posts/gh-pages-blog/", "categories": "Tutorial, Github Pages", "tags": "blog, github-pages, personal blog, jekyll", "date": "2021-12-23 01:10:00 +0500", "snippet": "Is there an easy way to create a blog?I will definitely answer yes. You can make your own blog from scratch in almost couple of clicks, using Github Pages and Jekyll. Everyone may ask, “Why would I use it?”. There are a lot of reasons to do it. Firstly, making something from scratch improves your technical skills. Secondly, it has no bloated code and target ads. Thirdly, you can modify and customize your blog as you want.If I have convinced you, then follow these steps to do it.Step 1: Find a theme that you likeI recommend you to choose a free one from various Jekyll themes. You won’t have to work with pages and styles, so that makes creating easier. Although, if you are experienced enough, you can make your own theme.Browse these sites in search of themes. http://jekyllthemes.org/ https://jekyllthemes.io/ https://jekyll-themes.com/ I’ve picked the Chirpy Theme, because it has a lot of features.Step 2: Setting up Github PagesFirstly, You need to create an Github Account if you don’t have one. After you’ve chosen the theme, you need to host it. Usually themes contain a set of instruction in README and configure instructions may vary between different ones.Chirpy Theme provides two ways to create repository for your site. Using the Chirpy Starter Forking on GithubI’ve used first one and recommend the same to you, because it’s easy to upgrade, isolates irrelevant project files so you can focus on writting.Even if you need to update or change something in it, you can override theme defaults.Filling in data on the Chirpy Starter web pageYou’ve followed the first link. Now name your repository as &amp;lt;GH_USERNAME&amp;gt;.github.io, where &amp;lt;GH_USERNAME&amp;gt; represents your Github username, and click on Create repository from template.After you’ve successfully created the repository, clone it locally.Set url variable in _config.yml to https://&amp;lt;GH_USERNAME&amp;gt;.github.io and then push changes to trigger Github Actions workflow.Once the build is complete, a new remote branch named gh-pages will appear. Then go to your repository Settings and click on Pages in the left bar, and thenin the section Source of Github Pages select the same parameters as in a screenshot and don’t forget to click on Save.Enable gh-pagesNow wait a few minutes and check https://&amp;lt;GH_USERNAME&amp;gt;.github.io/. Your own website works!Step 3: Custom DomainYou can skip this step if you don’t want to use a custom root domain. Firstly, you should purchase your domain on one of these sites. https://www.godaddy.com/ https://porkbun.com/ https://www.namecheap.com/ I’ve purchased mine on Porkbun.If you’ve already done it, then go into your domain management portal and add A type DNS records for Github Pages and ALIAS type record. Record Type Host Answer A your_domain.com 185.199.108.153 A your_domain.com 185.199.109.153 A your_domain.com 185.199.110.153 A your_domain.com 185.199.111.153 ALIAS www.your_domain.com your_domain.com Head to your repository, then Settings &amp;gt; Pages, where in custom domain section fill in it. Also make sure that you’ve marked Enforce HTTPS.Fill in custom domainDon’t forget to update url variable in _config.yml and push changes. DNS changes can take up a long time.Step 4: Enable comments to your posts.Chirpy Theme has Disqus comments. However, there are a lot of disadvantages to using Disqus: Awful &amp;amp; shameful ads if you’re using the free plan. Privacy problems. Increased page loading.If you don’t worry about these cons, you may sign up on Disqus and add the site there.There is another way to do it and it’s the Telegram Comments.Ups: Free. No ads. Users can upload multimedia attachments. Users can subscribe to comments.Downs: There is no thread system. 100 comments per post is the limit.Integrating Telegram Comments to your websiteHead to https://comments.app/ and click on CONNECT WEBSITE, then set name as you want and enter your domain. Add these lines in _config.ymltelegram: comments: true id: &#39;your site id from https://comments.app&#39;Then create _includes/telegram.html in your website directory.&amp;lt;script async src=&quot;https://comments.app/js/widget.js?3&quot; data-comments-app-website=vWr_ts-h data-limit=&quot;100&quot;&amp;gt;&amp;lt;/script&amp;gt;It the end, include telegram.html to your post layout.If you’re using Chirpy Theme, copy _layouts/page.html and _layouts/post.html to your repo/_layouts. Don’t forget to push changes.Tip: Running local server.Test your website before publication, you may do by running local server.bundle exec jekyll s The website will be available on 127.0.0.1:4000Make sure that you’ve installed Jekyll." }, { "title": "Getting Outlook Calendars using Python", "url": "/posts/outlook-integration/", "categories": "Programming, Python", "tags": "microsoft 365, outlook, personal experience", "date": "2021-12-07 12:25:00 +0500", "snippet": "In this post, I would like to share my experience that I received while working on a university project.I’m working on this projectA little bit about my projectThe work in this project was close to real. We had a customer and a nice task: to develop a telegram bot integrated with the Outlook calendar, which helps an HR manager to hire employees.My role was a Python Developer and my task was to write a small service which can fetch and modify events from someone’s Outlook calendar in organization.Microsoft GraphIn order to complete the task I decided to use O365 Python library, which makes communicating with Microsoft Outlook API very straight forward.I recommend reading the documentation before using it. So, next comes tutorial on how to get events from the Outlook calendar.Step 1: Create an organizationAn easy way to get an organization with all Office 365 apps licenses is joining the Microsoft 365 Developer Program.It’s free for 90 days. You will be required to register account if you don’t have one. Then fill some information about your company. At the end of setting, I recommend you to choose Instant sandbox just to save time and focus on future development.ChoiceAlso, on the dashboard you can find some interesting articles, quick starts and tutorials.Step 2: Creating an app in Azure PortalNow you should sign in with admin account of your organization, then open the App registrations:Azure PortalCreate a new registration:App registration windowOn the next page, name the app as you want, choose supported account types as Any Azure AD directory and set the web redirect URI to:https://login.microsoftonline.com/common/oauth2/nativeclientThe registration pageYou’ve registered an app and now you should pay attention on two tokens that will be required to use the API. You can find them in App registration, then choose your app and click on Overview on the left toolbar.App overview pageAlso you need to generate a secret key.ToolbarThen click on new client secret, fill the description and set expiration. A new line will be appear under Client secret section.Copy the secret key in the value column and save it. You should store it in secure location.Now click on API permissions on the left toolbar and add a permisions.Microsoft Graph APIAfter you’ve done it, don’t forget to grant admin consent.Step 3: Coding a serviceOpen your prefered IDE for me it’s Pycharm. Install the library with following command.pip install O365At the beginning, you import the library and set tokens grabbed from Azure Portal.from O365 import AccountCLIENT_ID = &#39;your client id&#39;SECRET_ID = &#39;your secret id&#39;TENANT_ID = &#39;your tenant id&#39;credentials = (CLIENT_ID, SECRET_ID)Then try to authenticate.account = Account(credentials, auth_flow_type=&#39;credentials&#39;, tenant_id=TENANT_ID)if account.authenticate(): print(&#39;Authenticated!&#39;)If everything is okay you will get an access token. Just a txt file in your working folder. Now you should choose some user in your organization. You can see them all in Azure Active Directory.Now you can easily get someone’s Outlook events.schedule = account.schedule(resource=&#39;user principle name from azure active directory&#39;)calendar = schedule.get_default_calendar()events = calendar.get_events(include_recurring=False)for event in events: print(event)Make sure that you’ve signed in with someone’s account and filled events.What’s next?As I said, read the documentation of the library. Try to parse events for providing more detailed and clean information about them.I’ll just show you what I wrote for our project.import datetime as dtimport asynciofrom functools import wraps, partialfrom os import environfrom O365 import Accountdef async_wrap(func): @wraps(func) async def run(*args, loop=None, executor=None, **kwargs): if loop is None: loop = asyncio.get_event_loop() pfunc = partial(func, *args, **kwargs) return await loop.run_in_executor(executor, pfunc) return runclass CalendarHelper: def __init__(self): self._account = Account(credentials=(environ[&#39;CLIENT_ID&#39;], environ[&#39;SECRET_ID&#39;]), auth_flow_type=&#39;credentials&#39;, tenant_id=environ[&#39;TENANT_ID&#39;]) @async_wrap def __get_schedule(self, hr_email): return self._account.schedule(resource=hr_email) @async_wrap def __get_calendar(self, schedule): return schedule.get_default_calendar() @async_wrap def __new_query(self, calendar): query = calendar.new_query(&#39;start&#39;).greater_equal(dt.datetime.today()) query.chain(&#39;and&#39;).on_attribute(&#39;end&#39;).less_equal(dt.datetime.today() + dt.timedelta(days=8)) return query @async_wrap def __auth(self): self._account.authenticate() @async_wrap def __get_events(self, calendar, query): return calendar.get_events(query=query) @async_wrap def __get_event(self, calendar, event_id): return calendar.get_event(event_id) @async_wrap def __event_save(self, event): event.save() async def weekly_free_time(self, hr_email): &quot;&quot;&quot; Get weekly free time in Outlook calendar. :param hr_email: Provide the email of the person whose events you want to receive. :return: List of events with event.subject = &#39;Свободное время&#39;. &quot;&quot;&quot; if not self._account.is_authenticated: await self.__auth() schedule = await self.__get_schedule(hr_email) calendar = await self.__get_calendar(schedule) query = await self.__new_query(calendar) return [event for event in await self.__get_events(calendar, query) if event.subject == &#39;Свободное время&#39;] async def update_event(self, hr_email, event_id, new_subject): &quot;&quot;&quot; Updates an existing event by its ID. :param hr_email: Provide an email of the person whose event you want to update. :param event_id: ID of event. :param new_subject: A new subject of event that will replace the old one. :return: &quot;&quot;&quot; if not self._account.is_authenticated: await self.__auth() schedule = await self.__get_schedule(hr_email) calendar = await self.__get_calendar(schedule) event = await self.__get_event(calendar, event_id) event.subject = new_subject await self.__event_save(event)" } ]
